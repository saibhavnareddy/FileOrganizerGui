import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.util.HashMap;
import java.util.Map;

public class FileOrganizerGUI {
    private JFrame frame;
    private JTextArea logArea;
    private JProgressBar progressBar;
    private File selectedDirectory;

    public FileOrganizerGUI() {
        frame = new JFrame("File Organizer");
        frame.setSize(500, 400);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new BorderLayout());

        JPanel panel = new JPanel();
        JButton selectFolderButton = new JButton("Select Folder");
        JButton organizeButton = new JButton("Organize Files");
        JButton exitButton = new JButton("Exit");

        selectFolderButton.addActionListener(e -> selectFolder());
        organizeButton.addActionListener(e -> organizeFiles());
        exitButton.addActionListener(e -> System.exit(0));

        panel.add(selectFolderButton);
        panel.add(organizeButton);
        panel.add(exitButton);

        logArea = new JTextArea();
        logArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(logArea);

        progressBar = new JProgressBar();
        progressBar.setStringPainted(true);

        frame.add(panel, BorderLayout.NORTH);
        frame.add(scrollPane, BorderLayout.CENTER);
        frame.add(progressBar, BorderLayout.SOUTH);

        frame.setVisible(true);
    }

    private void selectFolder() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int option = fileChooser.showOpenDialog(frame);
        if (option == JFileChooser.APPROVE_OPTION) {
            selectedDirectory = fileChooser.getSelectedFile();
            logArea.append("Selected folder: " + selectedDirectory.getAbsolutePath() + "\n");
        }
    }

    private void organizeFiles() {
        if (selectedDirectory == null) {
            JOptionPane.showMessageDialog(frame, "Please select a folder first.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        new Thread(() -> {
            File[] files = selectedDirectory.listFiles();
            if (files == null) return;
            
            Map<String, String> extensionMap = new HashMap<>();
            extensionMap.put(".jpg", "Images");
            extensionMap.put(".png", "Images");
            extensionMap.put(".mp3", "Music");
            extensionMap.put(".mp4", "Videos");
            extensionMap.put(".pdf", "Documents");
            extensionMap.put(".txt", "Text Files");

            progressBar.setMaximum(files.length);
            progressBar.setValue(0);
            
            int count = 0;
            for (File file : files) {
                if (file.isFile()) {
                    String fileName = file.getName();
                    for (String ext : extensionMap.keySet()) {
                        if (fileName.endsWith(ext)) {
                            File newDir = new File(selectedDirectory, extensionMap.get(ext));
                            if (!newDir.exists()) newDir.mkdirs();
                            
                            Path source = file.toPath();
                            Path destination = new File(newDir, file.getName()).toPath();
                            try {
                                Files.move(source, destination, StandardCopyOption.REPLACE_EXISTING);
                                logArea.append("Moved: " + fileName + " -> " + extensionMap.get(ext) + "\n");
                            } catch (Exception e) {
                                logArea.append("Error moving: " + fileName + "\n");
                            }
                            break;
                        }
                    }
                }
                count++;
                progressBar.setValue(count);
            }
            logArea.append("\nFile organization complete!\n");
        }).start();
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(FileOrganizerGUI::new);
    }
}
