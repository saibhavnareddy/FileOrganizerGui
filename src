import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.nio.file.*;
import java.util.Stack;

public class FileOrganizerGUI {
    private JFrame frame;
    private JTextArea logArea;
    private JFileChooser fileChooser;
    private Stack<Path[]> undoStack = new Stack<>();
    private File selectedFolder;

    public FileOrganizerGUI() {
        try {
            UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
        } catch (Exception e) {
            e.printStackTrace();
        }

        frame = new JFrame("üóÇ File Organizer");
        frame.setSize(600, 450);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new BorderLayout());

        // Dark mode setup
        frame.getContentPane().setBackground(Color.BLACK);

        JPanel panel = new JPanel();
        panel.setBackground(Color.DARK_GRAY);

        JButton selectButton = createButton("üìÇ Select Folder");
        JButton organizeButton = createButton("üîÑ Organize Files");
        JButton undoButton = createButton("‚Ü© Undo");
        JButton exitButton = createButton("‚ùå Exit");

        panel.add(selectButton);
        panel.add(organizeButton);
        panel.add(undoButton);
        panel.add(exitButton);

        logArea = new JTextArea();
        logArea.setEditable(false);
        logArea.setBackground(Color.BLACK);
        logArea.setForeground(Color.GREEN);
        logArea.setFont(new Font("Monospaced", Font.BOLD, 14));
        JScrollPane scrollPane = new JScrollPane(logArea);
        scrollPane.getViewport().setBackground(Color.BLACK);

        frame.add(panel, BorderLayout.NORTH);
        frame.add(scrollPane, BorderLayout.CENTER);

        fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        selectButton.addActionListener(e -> selectFolder());
        organizeButton.addActionListener(e -> organizeFiles());
        undoButton.addActionListener(e -> undoLastAction());
        exitButton.addActionListener(e -> System.exit(0));

        frame.setVisible(true);
    }

    private JButton createButton(String text) {
        JButton button = new JButton(text);
        button.setBackground(Color.DARK_GRAY);
        button.setForeground(Color.WHITE);
        button.setFocusPainted(false);
        return button;
    }

    private void selectFolder() {
        if (fileChooser.showOpenDialog(frame) == JFileChooser.APPROVE_OPTION) {
            selectedFolder = fileChooser.getSelectedFile();
            logArea.append("üìÅ Selected folder: " + selectedFolder.getAbsolutePath() + "\n");
        }
    }

    private void organizeFiles() {
        if (selectedFolder == null) {
            logArea.append("‚ö† Please select a folder first!\n");
            return;
        }

        File[] files = selectedFolder.listFiles();
        if (files == null || files.length == 0) {
            logArea.append("‚ö† No files found in the selected folder!\n");
            return;
        }

        for (File file : files) {
            if (file.isFile()) {
                String extension = getFileExtension(file);
                Path targetDir = selectedFolder.toPath().resolve(getCategory(extension));

                try {
                    Files.createDirectories(targetDir);
                    Path targetPath = targetDir.resolve(file.getName());
                    Files.move(file.toPath(), targetPath, StandardCopyOption.REPLACE_EXISTING);
                    undoStack.push(new Path[]{targetPath, file.toPath()});
                    logArea.append("‚úÖ Moved: " + file.getName() + " -> " + targetDir.getFileName() + "\n");
                } catch (Exception e) {
                    logArea.append("‚ùå Error moving: " + file.getName() + "\n");
                }
            }
        }
        logArea.append("\nüéâ File organization complete!\n");
    }

    private void undoLastAction() {
        if (undoStack.isEmpty()) {
            logArea.append("‚ö† No actions to undo.\n");
            return;
        }

        Path[] paths = undoStack.pop();
        try {
            Files.move(paths[0], paths[1], StandardCopyOption.REPLACE_EXISTING);
            logArea.append("‚Ü© Undone: " + paths[1].getFileName() + "\n");
        } catch (Exception e) {
            logArea.append("‚ùå Error undoing: " + paths[1].getFileName() + "\n");
        }
    }

    private String getFileExtension(File file) {
        String name = file.getName();
        int lastIndex = name.lastIndexOf(".");
        return (lastIndex == -1) ? "other" : name.substring(lastIndex + 1);
    }

    private String getCategory(String extension) {
        switch (extension.toLowerCase()) {
            case "jpg": case "png": case "gif": return "Images";
            case "mp4": case "mkv": case "avi": return "Videos";
            case "mp3": case "wav": case "flac": return "Music";
            case "pdf": case "docx": case "txt": return "Documents";
            case "zip": case "rar": case "7z": return "Archives";
            default: return "Other";
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(FileOrganizerGUI::new);
    }
}
